//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoomM.WebApp.AssetManagementWS {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AssetManagementWS.IAssetManagementWS")]
    public interface IAssetManagementWS {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/GetAssetList", ReplyAction="http://tempuri.org/IAssetManagementWS/GetAssetListResponse")]
        System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.Asset> GetAssetList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/GetAssetList", ReplyAction="http://tempuri.org/IAssetManagementWS/GetAssetListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.Asset>> GetAssetListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/GetAssetDetailList", ReplyAction="http://tempuri.org/IAssetManagementWS/GetAssetDetailListResponse")]
        System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetDetail> GetAssetDetailList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/GetAssetDetailList", ReplyAction="http://tempuri.org/IAssetManagementWS/GetAssetDetailListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetDetail>> GetAssetDetailListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/GetAssetDetailListByAssetId", ReplyAction="http://tempuri.org/IAssetManagementWS/GetAssetDetailListByAssetIdResponse")]
        System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetDetail> GetAssetDetailListByAssetId(long assetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/GetAssetDetailListByAssetId", ReplyAction="http://tempuri.org/IAssetManagementWS/GetAssetDetailListByAssetIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetDetail>> GetAssetDetailListByAssetIdAsync(long assetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/GetAssetDetailListByRoomId", ReplyAction="http://tempuri.org/IAssetManagementWS/GetAssetDetailListByRoomIdResponse")]
        System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetDetail> GetAssetDetailListByRoomId(long roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/GetAssetDetailListByRoomId", ReplyAction="http://tempuri.org/IAssetManagementWS/GetAssetDetailListByRoomIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetDetail>> GetAssetDetailListByRoomIdAsync(long roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/GetAssetHisListByRoomId", ReplyAction="http://tempuri.org/IAssetManagementWS/GetAssetHisListByRoomIdResponse")]
        System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetHistory> GetAssetHisListByRoomId(long roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/GetAssetHisListByRoomId", ReplyAction="http://tempuri.org/IAssetManagementWS/GetAssetHisListByRoomIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetHistory>> GetAssetHisListByRoomIdAsync(long roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/GetAssetHisListByBacktrace", ReplyAction="http://tempuri.org/IAssetManagementWS/GetAssetHisListByBacktraceResponse")]
        System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetHistory> GetAssetHisListByBacktrace(RoomM.Domain.RoomModule.Aggregates.Room room, System.DateTime timeForBacktrace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/GetAssetHisListByBacktrace", ReplyAction="http://tempuri.org/IAssetManagementWS/GetAssetHisListByBacktraceResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetHistory>> GetAssetHisListByBacktraceAsync(RoomM.Domain.RoomModule.Aggregates.Room room, System.DateTime timeForBacktrace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/AddAsset", ReplyAction="http://tempuri.org/IAssetManagementWS/AddAssetResponse")]
        void AddAsset(RoomM.Domain.AssetModule.Aggregates.Asset asset);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/AddAsset", ReplyAction="http://tempuri.org/IAssetManagementWS/AddAssetResponse")]
        System.Threading.Tasks.Task AddAssetAsync(RoomM.Domain.AssetModule.Aggregates.Asset asset);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/EditAsset", ReplyAction="http://tempuri.org/IAssetManagementWS/EditAssetResponse")]
        void EditAsset(RoomM.Domain.AssetModule.Aggregates.Asset asset);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/EditAsset", ReplyAction="http://tempuri.org/IAssetManagementWS/EditAssetResponse")]
        System.Threading.Tasks.Task EditAssetAsync(RoomM.Domain.AssetModule.Aggregates.Asset asset);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/DeleteAsset", ReplyAction="http://tempuri.org/IAssetManagementWS/DeleteAssetResponse")]
        void DeleteAsset(RoomM.Domain.AssetModule.Aggregates.Asset asset);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/DeleteAsset", ReplyAction="http://tempuri.org/IAssetManagementWS/DeleteAssetResponse")]
        System.Threading.Tasks.Task DeleteAssetAsync(RoomM.Domain.AssetModule.Aggregates.Asset asset);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/ImportAsset", ReplyAction="http://tempuri.org/IAssetManagementWS/ImportAssetResponse")]
        void ImportAsset(long assetId, long roomId, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/ImportAsset", ReplyAction="http://tempuri.org/IAssetManagementWS/ImportAssetResponse")]
        System.Threading.Tasks.Task ImportAssetAsync(long assetId, long roomId, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/DropAsset", ReplyAction="http://tempuri.org/IAssetManagementWS/DropAssetResponse")]
        void DropAsset(RoomM.Domain.AssetModule.Aggregates.AssetDetail assetDetail, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/DropAsset", ReplyAction="http://tempuri.org/IAssetManagementWS/DropAssetResponse")]
        System.Threading.Tasks.Task DropAssetAsync(RoomM.Domain.AssetModule.Aggregates.AssetDetail assetDetail, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/TransferAsset", ReplyAction="http://tempuri.org/IAssetManagementWS/TransferAssetResponse")]
        void TransferAsset(RoomM.Domain.AssetModule.Aggregates.AssetDetail assetDetail, RoomM.Domain.RoomModule.Aggregates.Room target, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetManagementWS/TransferAsset", ReplyAction="http://tempuri.org/IAssetManagementWS/TransferAssetResponse")]
        System.Threading.Tasks.Task TransferAssetAsync(RoomM.Domain.AssetModule.Aggregates.AssetDetail assetDetail, RoomM.Domain.RoomModule.Aggregates.Room target, int amount);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAssetManagementWSChannel : RoomM.WebApp.AssetManagementWS.IAssetManagementWS, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AssetManagementWSClient : System.ServiceModel.ClientBase<RoomM.WebApp.AssetManagementWS.IAssetManagementWS>, RoomM.WebApp.AssetManagementWS.IAssetManagementWS {
        
        public AssetManagementWSClient() {
        }
        
        public AssetManagementWSClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AssetManagementWSClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AssetManagementWSClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AssetManagementWSClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.Asset> GetAssetList() {
            return base.Channel.GetAssetList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.Asset>> GetAssetListAsync() {
            return base.Channel.GetAssetListAsync();
        }
        
        public System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetDetail> GetAssetDetailList() {
            return base.Channel.GetAssetDetailList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetDetail>> GetAssetDetailListAsync() {
            return base.Channel.GetAssetDetailListAsync();
        }
        
        public System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetDetail> GetAssetDetailListByAssetId(long assetId) {
            return base.Channel.GetAssetDetailListByAssetId(assetId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetDetail>> GetAssetDetailListByAssetIdAsync(long assetId) {
            return base.Channel.GetAssetDetailListByAssetIdAsync(assetId);
        }
        
        public System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetDetail> GetAssetDetailListByRoomId(long roomId) {
            return base.Channel.GetAssetDetailListByRoomId(roomId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetDetail>> GetAssetDetailListByRoomIdAsync(long roomId) {
            return base.Channel.GetAssetDetailListByRoomIdAsync(roomId);
        }
        
        public System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetHistory> GetAssetHisListByRoomId(long roomId) {
            return base.Channel.GetAssetHisListByRoomId(roomId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetHistory>> GetAssetHisListByRoomIdAsync(long roomId) {
            return base.Channel.GetAssetHisListByRoomIdAsync(roomId);
        }
        
        public System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetHistory> GetAssetHisListByBacktrace(RoomM.Domain.RoomModule.Aggregates.Room room, System.DateTime timeForBacktrace) {
            return base.Channel.GetAssetHisListByBacktrace(room, timeForBacktrace);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.AssetModule.Aggregates.AssetHistory>> GetAssetHisListByBacktraceAsync(RoomM.Domain.RoomModule.Aggregates.Room room, System.DateTime timeForBacktrace) {
            return base.Channel.GetAssetHisListByBacktraceAsync(room, timeForBacktrace);
        }
        
        public void AddAsset(RoomM.Domain.AssetModule.Aggregates.Asset asset) {
            base.Channel.AddAsset(asset);
        }
        
        public System.Threading.Tasks.Task AddAssetAsync(RoomM.Domain.AssetModule.Aggregates.Asset asset) {
            return base.Channel.AddAssetAsync(asset);
        }
        
        public void EditAsset(RoomM.Domain.AssetModule.Aggregates.Asset asset) {
            base.Channel.EditAsset(asset);
        }
        
        public System.Threading.Tasks.Task EditAssetAsync(RoomM.Domain.AssetModule.Aggregates.Asset asset) {
            return base.Channel.EditAssetAsync(asset);
        }
        
        public void DeleteAsset(RoomM.Domain.AssetModule.Aggregates.Asset asset) {
            base.Channel.DeleteAsset(asset);
        }
        
        public System.Threading.Tasks.Task DeleteAssetAsync(RoomM.Domain.AssetModule.Aggregates.Asset asset) {
            return base.Channel.DeleteAssetAsync(asset);
        }
        
        public void ImportAsset(long assetId, long roomId, int amount) {
            base.Channel.ImportAsset(assetId, roomId, amount);
        }
        
        public System.Threading.Tasks.Task ImportAssetAsync(long assetId, long roomId, int amount) {
            return base.Channel.ImportAssetAsync(assetId, roomId, amount);
        }
        
        public void DropAsset(RoomM.Domain.AssetModule.Aggregates.AssetDetail assetDetail, int amount) {
            base.Channel.DropAsset(assetDetail, amount);
        }
        
        public System.Threading.Tasks.Task DropAssetAsync(RoomM.Domain.AssetModule.Aggregates.AssetDetail assetDetail, int amount) {
            return base.Channel.DropAssetAsync(assetDetail, amount);
        }
        
        public void TransferAsset(RoomM.Domain.AssetModule.Aggregates.AssetDetail assetDetail, RoomM.Domain.RoomModule.Aggregates.Room target, int amount) {
            base.Channel.TransferAsset(assetDetail, target, amount);
        }
        
        public System.Threading.Tasks.Task TransferAssetAsync(RoomM.Domain.AssetModule.Aggregates.AssetDetail assetDetail, RoomM.Domain.RoomModule.Aggregates.Room target, int amount) {
            return base.Channel.TransferAssetAsync(assetDetail, target, amount);
        }
    }
}
