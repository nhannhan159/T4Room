//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoomM.DeskApp.AssetService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AssetService.IAssetService")]
    public interface IAssetService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Asset/GetAll", ReplyAction="http://tempuri.org/IServiceOf_Asset/GetAllResponse")]
        System.Collections.Generic.List<RoomM.Models.Asset> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Asset/GetAll", ReplyAction="http://tempuri.org/IServiceOf_Asset/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Models.Asset>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Asset/Add", ReplyAction="http://tempuri.org/IServiceOf_Asset/AddResponse")]
        void Add(RoomM.Models.Asset entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Asset/Add", ReplyAction="http://tempuri.org/IServiceOf_Asset/AddResponse")]
        System.Threading.Tasks.Task AddAsync(RoomM.Models.Asset entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Asset/DeleteByT", ReplyAction="http://tempuri.org/IServiceOf_Asset/DeleteByTResponse")]
        void DeleteByT(RoomM.Models.Asset entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Asset/DeleteByT", ReplyAction="http://tempuri.org/IServiceOf_Asset/DeleteByTResponse")]
        System.Threading.Tasks.Task DeleteByTAsync(RoomM.Models.Asset entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Asset/DeleteByObject", ReplyAction="http://tempuri.org/IServiceOf_Asset/DeleteByObjectResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<RoomM.Models.Asset>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.Asset))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.Detachable<RoomM.Models.Asset>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.EntityBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<RoomM.Models.RoomAssetHistory>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.RoomAssetHistory))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.Detachable<RoomM.Models.RoomAssetHistory>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.HistoryType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.Detachable<RoomM.Models.HistoryType>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.Room))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.Detachable<RoomM.Models.Room>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<RoomM.Models.RoomAsset>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.RoomAsset))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.Detachable<RoomM.Models.RoomAsset>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<RoomM.Models.RoomCalendar>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.RoomCalendar))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.Detachable<RoomM.Models.RoomCalendar>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.RoomCalendarStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.Detachable<RoomM.Models.RoomCalendarStatus>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.Staff))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.Detachable<RoomM.Models.Staff>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.StaffType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.Detachable<RoomM.Models.StaffType>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<RoomM.Models.Staff>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.RoomType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.Detachable<RoomM.Models.RoomType>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<RoomM.Models.Room>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
        void DeleteByObject(object id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Asset/DeleteByObject", ReplyAction="http://tempuri.org/IServiceOf_Asset/DeleteByObjectResponse")]
        System.Threading.Tasks.Task DeleteByObjectAsync(object id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Asset/Edit", ReplyAction="http://tempuri.org/IServiceOf_Asset/EditResponse")]
        void Edit(RoomM.Models.Asset entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Asset/Edit", ReplyAction="http://tempuri.org/IServiceOf_Asset/EditResponse")]
        System.Threading.Tasks.Task EditAsync(RoomM.Models.Asset entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Asset/Save", ReplyAction="http://tempuri.org/IServiceOf_Asset/SaveResponse")]
        void Save();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Asset/Save", ReplyAction="http://tempuri.org/IServiceOf_Asset/SaveResponse")]
        System.Threading.Tasks.Task SaveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetService/GetSingle", ReplyAction="http://tempuri.org/IAssetService/GetSingleResponse")]
        RoomM.Models.Asset GetSingle(int deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetService/GetSingle", ReplyAction="http://tempuri.org/IAssetService/GetSingleResponse")]
        System.Threading.Tasks.Task<RoomM.Models.Asset> GetSingleAsync(int deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetService/GetNameList", ReplyAction="http://tempuri.org/IAssetService/GetNameListResponse")]
        System.Collections.Generic.List<string> GetNameList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetService/GetNameList", ReplyAction="http://tempuri.org/IAssetService/GetNameListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetNameListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetService/isUniqueName", ReplyAction="http://tempuri.org/IAssetService/isUniqueNameResponse")]
        bool isUniqueName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssetService/isUniqueName", ReplyAction="http://tempuri.org/IAssetService/isUniqueNameResponse")]
        System.Threading.Tasks.Task<bool> isUniqueNameAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAssetServiceChannel : RoomM.DeskApp.AssetService.IAssetService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AssetServiceClient : System.ServiceModel.ClientBase<RoomM.DeskApp.AssetService.IAssetService>, RoomM.DeskApp.AssetService.IAssetService {
        
        public AssetServiceClient() {
        }
        
        public AssetServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AssetServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AssetServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AssetServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<RoomM.Models.Asset> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Models.Asset>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public void Add(RoomM.Models.Asset entity) {
            base.Channel.Add(entity);
        }
        
        public System.Threading.Tasks.Task AddAsync(RoomM.Models.Asset entity) {
            return base.Channel.AddAsync(entity);
        }
        
        public void DeleteByT(RoomM.Models.Asset entity) {
            base.Channel.DeleteByT(entity);
        }
        
        public System.Threading.Tasks.Task DeleteByTAsync(RoomM.Models.Asset entity) {
            return base.Channel.DeleteByTAsync(entity);
        }
        
        public void DeleteByObject(object id) {
            base.Channel.DeleteByObject(id);
        }
        
        public System.Threading.Tasks.Task DeleteByObjectAsync(object id) {
            return base.Channel.DeleteByObjectAsync(id);
        }
        
        public void Edit(RoomM.Models.Asset entity) {
            base.Channel.Edit(entity);
        }
        
        public System.Threading.Tasks.Task EditAsync(RoomM.Models.Asset entity) {
            return base.Channel.EditAsync(entity);
        }
        
        public void Save() {
            base.Channel.Save();
        }
        
        public System.Threading.Tasks.Task SaveAsync() {
            return base.Channel.SaveAsync();
        }
        
        public RoomM.Models.Asset GetSingle(int deviceId) {
            return base.Channel.GetSingle(deviceId);
        }
        
        public System.Threading.Tasks.Task<RoomM.Models.Asset> GetSingleAsync(int deviceId) {
            return base.Channel.GetSingleAsync(deviceId);
        }
        
        public System.Collections.Generic.List<string> GetNameList() {
            return base.Channel.GetNameList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetNameListAsync() {
            return base.Channel.GetNameListAsync();
        }
        
        public bool isUniqueName(string name) {
            return base.Channel.isUniqueName(name);
        }
        
        public System.Threading.Tasks.Task<bool> isUniqueNameAsync(string name) {
            return base.Channel.isUniqueNameAsync(name);
        }
    }
}
