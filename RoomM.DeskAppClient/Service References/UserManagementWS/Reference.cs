//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoomM.DeskApp.UserManagementWS {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserManagementWS.IUserManagementWS")]
    public interface IUserManagementWS {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetSingle", ReplyAction="http://tempuri.org/IUserManagementWS/GetSingleResponse")]
        RoomM.Domain.UserModule.Aggregates.User GetSingle(long userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetSingle", ReplyAction="http://tempuri.org/IUserManagementWS/GetSingleResponse")]
        System.Threading.Tasks.Task<RoomM.Domain.UserModule.Aggregates.User> GetSingleAsync(long userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetSingleByUsername", ReplyAction="http://tempuri.org/IUserManagementWS/GetSingleByUsernameResponse")]
        RoomM.Domain.UserModule.Aggregates.User GetSingleByUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetSingleByUsername", ReplyAction="http://tempuri.org/IUserManagementWS/GetSingleByUsernameResponse")]
        System.Threading.Tasks.Task<RoomM.Domain.UserModule.Aggregates.User> GetSingleByUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetUserList", ReplyAction="http://tempuri.org/IUserManagementWS/GetUserListResponse")]
        System.Collections.Generic.List<RoomM.Domain.UserModule.Aggregates.User> GetUserList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetUserList", ReplyAction="http://tempuri.org/IUserManagementWS/GetUserListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.UserModule.Aggregates.User>> GetUserListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetRoleList", ReplyAction="http://tempuri.org/IUserManagementWS/GetRoleListResponse")]
        System.Collections.Generic.List<RoomM.Domain.UserModule.Aggregates.Role> GetRoleList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetRoleList", ReplyAction="http://tempuri.org/IUserManagementWS/GetRoleListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.UserModule.Aggregates.Role>> GetRoleListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetUserLimitByRegister", ReplyAction="http://tempuri.org/IUserManagementWS/GetUserLimitByRegisterResponse")]
        System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<RoomM.Domain.UserModule.Aggregates.User, int>> GetUserLimitByRegister(int limit, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetUserLimitByRegister", ReplyAction="http://tempuri.org/IUserManagementWS/GetUserLimitByRegisterResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<RoomM.Domain.UserModule.Aggregates.User, int>>> GetUserLimitByRegisterAsync(int limit, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/AddUser", ReplyAction="http://tempuri.org/IUserManagementWS/AddUserResponse")]
        void AddUser(RoomM.Domain.UserModule.Aggregates.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/AddUser", ReplyAction="http://tempuri.org/IUserManagementWS/AddUserResponse")]
        System.Threading.Tasks.Task AddUserAsync(RoomM.Domain.UserModule.Aggregates.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/EditUser", ReplyAction="http://tempuri.org/IUserManagementWS/EditUserResponse")]
        void EditUser(RoomM.Domain.UserModule.Aggregates.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/EditUser", ReplyAction="http://tempuri.org/IUserManagementWS/EditUserResponse")]
        System.Threading.Tasks.Task EditUserAsync(RoomM.Domain.UserModule.Aggregates.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/DeleteUser", ReplyAction="http://tempuri.org/IUserManagementWS/DeleteUserResponse")]
        void DeleteUser(RoomM.Domain.UserModule.Aggregates.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/DeleteUser", ReplyAction="http://tempuri.org/IUserManagementWS/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(RoomM.Domain.UserModule.Aggregates.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetRoleById", ReplyAction="http://tempuri.org/IUserManagementWS/GetRoleByIdResponse")]
        RoomM.Domain.UserModule.Aggregates.Role GetRoleById(long roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetRoleById", ReplyAction="http://tempuri.org/IUserManagementWS/GetRoleByIdResponse")]
        System.Threading.Tasks.Task<RoomM.Domain.UserModule.Aggregates.Role> GetRoleByIdAsync(long roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetRoleByName", ReplyAction="http://tempuri.org/IUserManagementWS/GetRoleByNameResponse")]
        RoomM.Domain.UserModule.Aggregates.Role GetRoleByName(string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetRoleByName", ReplyAction="http://tempuri.org/IUserManagementWS/GetRoleByNameResponse")]
        System.Threading.Tasks.Task<RoomM.Domain.UserModule.Aggregates.Role> GetRoleByNameAsync(string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/AddRole", ReplyAction="http://tempuri.org/IUserManagementWS/AddRoleResponse")]
        void AddRole(RoomM.Domain.UserModule.Aggregates.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/AddRole", ReplyAction="http://tempuri.org/IUserManagementWS/AddRoleResponse")]
        System.Threading.Tasks.Task AddRoleAsync(RoomM.Domain.UserModule.Aggregates.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/EditRole", ReplyAction="http://tempuri.org/IUserManagementWS/EditRoleResponse")]
        void EditRole(RoomM.Domain.UserModule.Aggregates.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/EditRole", ReplyAction="http://tempuri.org/IUserManagementWS/EditRoleResponse")]
        System.Threading.Tasks.Task EditRoleAsync(RoomM.Domain.UserModule.Aggregates.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/DeleteRole", ReplyAction="http://tempuri.org/IUserManagementWS/DeleteRoleResponse")]
        void DeleteRole(long roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/DeleteRole", ReplyAction="http://tempuri.org/IUserManagementWS/DeleteRoleResponse")]
        System.Threading.Tasks.Task DeleteRoleAsync(long roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetUserClaimList", ReplyAction="http://tempuri.org/IUserManagementWS/GetUserClaimListResponse")]
        System.Collections.Generic.List<RoomM.Domain.UserModule.Aggregates.UserClaim> GetUserClaimList(long userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetUserClaimList", ReplyAction="http://tempuri.org/IUserManagementWS/GetUserClaimListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.UserModule.Aggregates.UserClaim>> GetUserClaimListAsync(long userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/AddUserClaim", ReplyAction="http://tempuri.org/IUserManagementWS/AddUserClaimResponse")]
        void AddUserClaim(long userId, string claimType, string claimValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/AddUserClaim", ReplyAction="http://tempuri.org/IUserManagementWS/AddUserClaimResponse")]
        System.Threading.Tasks.Task AddUserClaimAsync(long userId, string claimType, string claimValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/DeleteUserClaim", ReplyAction="http://tempuri.org/IUserManagementWS/DeleteUserClaimResponse")]
        void DeleteUserClaim(long userId, string claimType, string claimValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/DeleteUserClaim", ReplyAction="http://tempuri.org/IUserManagementWS/DeleteUserClaimResponse")]
        System.Threading.Tasks.Task DeleteUserClaimAsync(long userId, string claimType, string claimValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetUserLoginList", ReplyAction="http://tempuri.org/IUserManagementWS/GetUserLoginListResponse")]
        System.Collections.Generic.List<RoomM.Domain.UserModule.Aggregates.UserLogin> GetUserLoginList(long userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/GetUserLoginList", ReplyAction="http://tempuri.org/IUserManagementWS/GetUserLoginListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.UserModule.Aggregates.UserLogin>> GetUserLoginListAsync(long userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/FindUserByLogin", ReplyAction="http://tempuri.org/IUserManagementWS/FindUserByLoginResponse")]
        RoomM.Domain.UserModule.Aggregates.User FindUserByLogin(string loginProvider, string providerKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/FindUserByLogin", ReplyAction="http://tempuri.org/IUserManagementWS/FindUserByLoginResponse")]
        System.Threading.Tasks.Task<RoomM.Domain.UserModule.Aggregates.User> FindUserByLoginAsync(string loginProvider, string providerKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/AddUserLogin", ReplyAction="http://tempuri.org/IUserManagementWS/AddUserLoginResponse")]
        void AddUserLogin(long userId, string loginProvider, string providerKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/AddUserLogin", ReplyAction="http://tempuri.org/IUserManagementWS/AddUserLoginResponse")]
        System.Threading.Tasks.Task AddUserLoginAsync(long userId, string loginProvider, string providerKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/DeleteUserLogin", ReplyAction="http://tempuri.org/IUserManagementWS/DeleteUserLoginResponse")]
        void DeleteUserLogin(long userId, string loginProvider, string providerKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagementWS/DeleteUserLogin", ReplyAction="http://tempuri.org/IUserManagementWS/DeleteUserLoginResponse")]
        System.Threading.Tasks.Task DeleteUserLoginAsync(long userId, string loginProvider, string providerKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserManagementWSChannel : RoomM.DeskApp.UserManagementWS.IUserManagementWS, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserManagementWSClient : System.ServiceModel.ClientBase<RoomM.DeskApp.UserManagementWS.IUserManagementWS>, RoomM.DeskApp.UserManagementWS.IUserManagementWS {
        
        public UserManagementWSClient() {
        }
        
        public UserManagementWSClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserManagementWSClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagementWSClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagementWSClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RoomM.Domain.UserModule.Aggregates.User GetSingle(long userId) {
            return base.Channel.GetSingle(userId);
        }
        
        public System.Threading.Tasks.Task<RoomM.Domain.UserModule.Aggregates.User> GetSingleAsync(long userId) {
            return base.Channel.GetSingleAsync(userId);
        }
        
        public RoomM.Domain.UserModule.Aggregates.User GetSingleByUsername(string username) {
            return base.Channel.GetSingleByUsername(username);
        }
        
        public System.Threading.Tasks.Task<RoomM.Domain.UserModule.Aggregates.User> GetSingleByUsernameAsync(string username) {
            return base.Channel.GetSingleByUsernameAsync(username);
        }
        
        public System.Collections.Generic.List<RoomM.Domain.UserModule.Aggregates.User> GetUserList() {
            return base.Channel.GetUserList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.UserModule.Aggregates.User>> GetUserListAsync() {
            return base.Channel.GetUserListAsync();
        }
        
        public System.Collections.Generic.List<RoomM.Domain.UserModule.Aggregates.Role> GetRoleList() {
            return base.Channel.GetRoleList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.UserModule.Aggregates.Role>> GetRoleListAsync() {
            return base.Channel.GetRoleListAsync();
        }
        
        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<RoomM.Domain.UserModule.Aggregates.User, int>> GetUserLimitByRegister(int limit, System.DateTime from, System.DateTime to) {
            return base.Channel.GetUserLimitByRegister(limit, from, to);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<RoomM.Domain.UserModule.Aggregates.User, int>>> GetUserLimitByRegisterAsync(int limit, System.DateTime from, System.DateTime to) {
            return base.Channel.GetUserLimitByRegisterAsync(limit, from, to);
        }
        
        public void AddUser(RoomM.Domain.UserModule.Aggregates.User user) {
            base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task AddUserAsync(RoomM.Domain.UserModule.Aggregates.User user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public void EditUser(RoomM.Domain.UserModule.Aggregates.User user) {
            base.Channel.EditUser(user);
        }
        
        public System.Threading.Tasks.Task EditUserAsync(RoomM.Domain.UserModule.Aggregates.User user) {
            return base.Channel.EditUserAsync(user);
        }
        
        public void DeleteUser(RoomM.Domain.UserModule.Aggregates.User user) {
            base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(RoomM.Domain.UserModule.Aggregates.User user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public RoomM.Domain.UserModule.Aggregates.Role GetRoleById(long roleId) {
            return base.Channel.GetRoleById(roleId);
        }
        
        public System.Threading.Tasks.Task<RoomM.Domain.UserModule.Aggregates.Role> GetRoleByIdAsync(long roleId) {
            return base.Channel.GetRoleByIdAsync(roleId);
        }
        
        public RoomM.Domain.UserModule.Aggregates.Role GetRoleByName(string roleName) {
            return base.Channel.GetRoleByName(roleName);
        }
        
        public System.Threading.Tasks.Task<RoomM.Domain.UserModule.Aggregates.Role> GetRoleByNameAsync(string roleName) {
            return base.Channel.GetRoleByNameAsync(roleName);
        }
        
        public void AddRole(RoomM.Domain.UserModule.Aggregates.Role role) {
            base.Channel.AddRole(role);
        }
        
        public System.Threading.Tasks.Task AddRoleAsync(RoomM.Domain.UserModule.Aggregates.Role role) {
            return base.Channel.AddRoleAsync(role);
        }
        
        public void EditRole(RoomM.Domain.UserModule.Aggregates.Role role) {
            base.Channel.EditRole(role);
        }
        
        public System.Threading.Tasks.Task EditRoleAsync(RoomM.Domain.UserModule.Aggregates.Role role) {
            return base.Channel.EditRoleAsync(role);
        }
        
        public void DeleteRole(long roleId) {
            base.Channel.DeleteRole(roleId);
        }
        
        public System.Threading.Tasks.Task DeleteRoleAsync(long roleId) {
            return base.Channel.DeleteRoleAsync(roleId);
        }
        
        public System.Collections.Generic.List<RoomM.Domain.UserModule.Aggregates.UserClaim> GetUserClaimList(long userId) {
            return base.Channel.GetUserClaimList(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.UserModule.Aggregates.UserClaim>> GetUserClaimListAsync(long userId) {
            return base.Channel.GetUserClaimListAsync(userId);
        }
        
        public void AddUserClaim(long userId, string claimType, string claimValue) {
            base.Channel.AddUserClaim(userId, claimType, claimValue);
        }
        
        public System.Threading.Tasks.Task AddUserClaimAsync(long userId, string claimType, string claimValue) {
            return base.Channel.AddUserClaimAsync(userId, claimType, claimValue);
        }
        
        public void DeleteUserClaim(long userId, string claimType, string claimValue) {
            base.Channel.DeleteUserClaim(userId, claimType, claimValue);
        }
        
        public System.Threading.Tasks.Task DeleteUserClaimAsync(long userId, string claimType, string claimValue) {
            return base.Channel.DeleteUserClaimAsync(userId, claimType, claimValue);
        }
        
        public System.Collections.Generic.List<RoomM.Domain.UserModule.Aggregates.UserLogin> GetUserLoginList(long userId) {
            return base.Channel.GetUserLoginList(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Domain.UserModule.Aggregates.UserLogin>> GetUserLoginListAsync(long userId) {
            return base.Channel.GetUserLoginListAsync(userId);
        }
        
        public RoomM.Domain.UserModule.Aggregates.User FindUserByLogin(string loginProvider, string providerKey) {
            return base.Channel.FindUserByLogin(loginProvider, providerKey);
        }
        
        public System.Threading.Tasks.Task<RoomM.Domain.UserModule.Aggregates.User> FindUserByLoginAsync(string loginProvider, string providerKey) {
            return base.Channel.FindUserByLoginAsync(loginProvider, providerKey);
        }
        
        public void AddUserLogin(long userId, string loginProvider, string providerKey) {
            base.Channel.AddUserLogin(userId, loginProvider, providerKey);
        }
        
        public System.Threading.Tasks.Task AddUserLoginAsync(long userId, string loginProvider, string providerKey) {
            return base.Channel.AddUserLoginAsync(userId, loginProvider, providerKey);
        }
        
        public void DeleteUserLogin(long userId, string loginProvider, string providerKey) {
            base.Channel.DeleteUserLogin(userId, loginProvider, providerKey);
        }
        
        public System.Threading.Tasks.Task DeleteUserLoginAsync(long userId, string loginProvider, string providerKey) {
            return base.Channel.DeleteUserLoginAsync(userId, loginProvider, providerKey);
        }
    }
}
