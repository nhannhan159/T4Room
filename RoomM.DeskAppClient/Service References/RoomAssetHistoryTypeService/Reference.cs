//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoomM.DeskApp.RoomAssetHistoryTypeService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RoomAssetHistoryTypeService.IRoomAssetHistoryTypeService")]
    public interface IRoomAssetHistoryTypeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_HistoryType/GetSingle", ReplyAction="http://tempuri.org/IServiceOf_HistoryType/GetSingleResponse")]
        RoomM.Models.HistoryType GetSingle(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_HistoryType/GetSingle", ReplyAction="http://tempuri.org/IServiceOf_HistoryType/GetSingleResponse")]
        System.Threading.Tasks.Task<RoomM.Models.HistoryType> GetSingleAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_HistoryType/GetAll", ReplyAction="http://tempuri.org/IServiceOf_HistoryType/GetAllResponse")]
        System.Collections.Generic.List<RoomM.Models.HistoryType> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_HistoryType/GetAll", ReplyAction="http://tempuri.org/IServiceOf_HistoryType/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Models.HistoryType>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_HistoryType/Add", ReplyAction="http://tempuri.org/IServiceOf_HistoryType/AddResponse")]
        void Add(RoomM.Models.HistoryType entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_HistoryType/Add", ReplyAction="http://tempuri.org/IServiceOf_HistoryType/AddResponse")]
        System.Threading.Tasks.Task AddAsync(RoomM.Models.HistoryType entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_HistoryType/DeleteByT", ReplyAction="http://tempuri.org/IServiceOf_HistoryType/DeleteByTResponse")]
        void DeleteByT(RoomM.Models.HistoryType entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_HistoryType/DeleteByT", ReplyAction="http://tempuri.org/IServiceOf_HistoryType/DeleteByTResponse")]
        System.Threading.Tasks.Task DeleteByTAsync(RoomM.Models.HistoryType entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_HistoryType/DeleteByObject", ReplyAction="http://tempuri.org/IServiceOf_HistoryType/DeleteByObjectResponse")]
        void DeleteByObject(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_HistoryType/DeleteByObject", ReplyAction="http://tempuri.org/IServiceOf_HistoryType/DeleteByObjectResponse")]
        System.Threading.Tasks.Task DeleteByObjectAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_HistoryType/Edit", ReplyAction="http://tempuri.org/IServiceOf_HistoryType/EditResponse")]
        void Edit(RoomM.Models.HistoryType entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_HistoryType/Edit", ReplyAction="http://tempuri.org/IServiceOf_HistoryType/EditResponse")]
        System.Threading.Tasks.Task EditAsync(RoomM.Models.HistoryType entity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRoomAssetHistoryTypeServiceChannel : RoomM.DeskApp.RoomAssetHistoryTypeService.IRoomAssetHistoryTypeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoomAssetHistoryTypeServiceClient : System.ServiceModel.ClientBase<RoomM.DeskApp.RoomAssetHistoryTypeService.IRoomAssetHistoryTypeService>, RoomM.DeskApp.RoomAssetHistoryTypeService.IRoomAssetHistoryTypeService {
        
        public RoomAssetHistoryTypeServiceClient() {
        }
        
        public RoomAssetHistoryTypeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RoomAssetHistoryTypeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoomAssetHistoryTypeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoomAssetHistoryTypeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RoomM.Models.HistoryType GetSingle(long id) {
            return base.Channel.GetSingle(id);
        }
        
        public System.Threading.Tasks.Task<RoomM.Models.HistoryType> GetSingleAsync(long id) {
            return base.Channel.GetSingleAsync(id);
        }
        
        public System.Collections.Generic.List<RoomM.Models.HistoryType> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Models.HistoryType>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public void Add(RoomM.Models.HistoryType entity) {
            base.Channel.Add(entity);
        }
        
        public System.Threading.Tasks.Task AddAsync(RoomM.Models.HistoryType entity) {
            return base.Channel.AddAsync(entity);
        }
        
        public void DeleteByT(RoomM.Models.HistoryType entity) {
            base.Channel.DeleteByT(entity);
        }
        
        public System.Threading.Tasks.Task DeleteByTAsync(RoomM.Models.HistoryType entity) {
            return base.Channel.DeleteByTAsync(entity);
        }
        
        public void DeleteByObject(long id) {
            base.Channel.DeleteByObject(id);
        }
        
        public System.Threading.Tasks.Task DeleteByObjectAsync(long id) {
            return base.Channel.DeleteByObjectAsync(id);
        }
        
        public void Edit(RoomM.Models.HistoryType entity) {
            base.Channel.Edit(entity);
        }
        
        public System.Threading.Tasks.Task EditAsync(RoomM.Models.HistoryType entity) {
            return base.Channel.EditAsync(entity);
        }
    }
}
