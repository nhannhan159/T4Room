//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoomM.DeskApp.RoomAssetHistoryService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RoomAssetHistoryService.IRoomAssetHistoryService")]
    public interface IRoomAssetHistoryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_RoomAssetHistory/GetAll", ReplyAction="http://tempuri.org/IServiceOf_RoomAssetHistory/GetAllResponse")]
        System.Collections.Generic.List<RoomM.Models.RoomAssetHistory> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_RoomAssetHistory/GetAll", ReplyAction="http://tempuri.org/IServiceOf_RoomAssetHistory/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Models.RoomAssetHistory>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_RoomAssetHistory/Add", ReplyAction="http://tempuri.org/IServiceOf_RoomAssetHistory/AddResponse")]
        void Add(RoomM.Models.RoomAssetHistory entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_RoomAssetHistory/Add", ReplyAction="http://tempuri.org/IServiceOf_RoomAssetHistory/AddResponse")]
        System.Threading.Tasks.Task AddAsync(RoomM.Models.RoomAssetHistory entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_RoomAssetHistory/DeleteByT", ReplyAction="http://tempuri.org/IServiceOf_RoomAssetHistory/DeleteByTResponse")]
        void DeleteByT(RoomM.Models.RoomAssetHistory entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_RoomAssetHistory/DeleteByT", ReplyAction="http://tempuri.org/IServiceOf_RoomAssetHistory/DeleteByTResponse")]
        System.Threading.Tasks.Task DeleteByTAsync(RoomM.Models.RoomAssetHistory entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_RoomAssetHistory/DeleteByObject", ReplyAction="http://tempuri.org/IServiceOf_RoomAssetHistory/DeleteByObjectResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<RoomM.Models.RoomAssetHistory>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.RoomAssetHistory))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.EntityBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.Room))]
        void DeleteByObject(object id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_RoomAssetHistory/DeleteByObject", ReplyAction="http://tempuri.org/IServiceOf_RoomAssetHistory/DeleteByObjectResponse")]
        System.Threading.Tasks.Task DeleteByObjectAsync(object id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_RoomAssetHistory/Edit", ReplyAction="http://tempuri.org/IServiceOf_RoomAssetHistory/EditResponse")]
        void Edit(RoomM.Models.RoomAssetHistory entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_RoomAssetHistory/Edit", ReplyAction="http://tempuri.org/IServiceOf_RoomAssetHistory/EditResponse")]
        System.Threading.Tasks.Task EditAsync(RoomM.Models.RoomAssetHistory entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoomAssetHistoryService/GetSingle", ReplyAction="http://tempuri.org/IRoomAssetHistoryService/GetSingleResponse")]
        RoomM.Models.RoomAssetHistory GetSingle(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoomAssetHistoryService/GetSingle", ReplyAction="http://tempuri.org/IRoomAssetHistoryService/GetSingleResponse")]
        System.Threading.Tasks.Task<RoomM.Models.RoomAssetHistory> GetSingleAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoomAssetHistoryService/GetByRoomId", ReplyAction="http://tempuri.org/IRoomAssetHistoryService/GetByRoomIdResponse")]
        System.Collections.Generic.List<RoomM.Models.RoomAssetHistory> GetByRoomId(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoomAssetHistoryService/GetByRoomId", ReplyAction="http://tempuri.org/IRoomAssetHistoryService/GetByRoomIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Models.RoomAssetHistory>> GetByRoomIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoomAssetHistoryService/GetByRoom2RoomId", ReplyAction="http://tempuri.org/IRoomAssetHistoryService/GetByRoom2RoomIdResponse")]
        System.Collections.Generic.List<RoomM.Models.RoomAssetHistory> GetByRoom2RoomId(RoomM.Models.Room room, System.DateTime timeForBacktrace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoomAssetHistoryService/GetByRoom2RoomId", ReplyAction="http://tempuri.org/IRoomAssetHistoryService/GetByRoom2RoomIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Models.RoomAssetHistory>> GetByRoom2RoomIdAsync(RoomM.Models.Room room, System.DateTime timeForBacktrace);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRoomAssetHistoryServiceChannel : RoomM.DeskApp.RoomAssetHistoryService.IRoomAssetHistoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoomAssetHistoryServiceClient : System.ServiceModel.ClientBase<RoomM.DeskApp.RoomAssetHistoryService.IRoomAssetHistoryService>, RoomM.DeskApp.RoomAssetHistoryService.IRoomAssetHistoryService {
        
        public RoomAssetHistoryServiceClient() {
        }
        
        public RoomAssetHistoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RoomAssetHistoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoomAssetHistoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoomAssetHistoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<RoomM.Models.RoomAssetHistory> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Models.RoomAssetHistory>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public void Add(RoomM.Models.RoomAssetHistory entity) {
            base.Channel.Add(entity);
        }
        
        public System.Threading.Tasks.Task AddAsync(RoomM.Models.RoomAssetHistory entity) {
            return base.Channel.AddAsync(entity);
        }
        
        public void DeleteByT(RoomM.Models.RoomAssetHistory entity) {
            base.Channel.DeleteByT(entity);
        }
        
        public System.Threading.Tasks.Task DeleteByTAsync(RoomM.Models.RoomAssetHistory entity) {
            return base.Channel.DeleteByTAsync(entity);
        }
        
        public void DeleteByObject(object id) {
            base.Channel.DeleteByObject(id);
        }
        
        public System.Threading.Tasks.Task DeleteByObjectAsync(object id) {
            return base.Channel.DeleteByObjectAsync(id);
        }
        
        public void Edit(RoomM.Models.RoomAssetHistory entity) {
            base.Channel.Edit(entity);
        }
        
        public System.Threading.Tasks.Task EditAsync(RoomM.Models.RoomAssetHistory entity) {
            return base.Channel.EditAsync(entity);
        }
        
        public RoomM.Models.RoomAssetHistory GetSingle(int id) {
            return base.Channel.GetSingle(id);
        }
        
        public System.Threading.Tasks.Task<RoomM.Models.RoomAssetHistory> GetSingleAsync(int id) {
            return base.Channel.GetSingleAsync(id);
        }
        
        public System.Collections.Generic.List<RoomM.Models.RoomAssetHistory> GetByRoomId(long id) {
            return base.Channel.GetByRoomId(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Models.RoomAssetHistory>> GetByRoomIdAsync(long id) {
            return base.Channel.GetByRoomIdAsync(id);
        }
        
        public System.Collections.Generic.List<RoomM.Models.RoomAssetHistory> GetByRoom2RoomId(RoomM.Models.Room room, System.DateTime timeForBacktrace) {
            return base.Channel.GetByRoom2RoomId(room, timeForBacktrace);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Models.RoomAssetHistory>> GetByRoom2RoomIdAsync(RoomM.Models.Room room, System.DateTime timeForBacktrace) {
            return base.Channel.GetByRoom2RoomIdAsync(room, timeForBacktrace);
        }
    }
}
