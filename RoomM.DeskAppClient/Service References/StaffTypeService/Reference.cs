//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoomM.DeskApp.StaffTypeService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StaffTypeService.IStaffTypeService")]
    public interface IStaffTypeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_StaffType/GetAll", ReplyAction="http://tempuri.org/IServiceOf_StaffType/GetAllResponse")]
        System.Collections.Generic.List<RoomM.Models.StaffType> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_StaffType/GetAll", ReplyAction="http://tempuri.org/IServiceOf_StaffType/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Models.StaffType>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_StaffType/Add", ReplyAction="http://tempuri.org/IServiceOf_StaffType/AddResponse")]
        void Add(RoomM.Models.StaffType entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_StaffType/Add", ReplyAction="http://tempuri.org/IServiceOf_StaffType/AddResponse")]
        System.Threading.Tasks.Task AddAsync(RoomM.Models.StaffType entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_StaffType/DeleteByT", ReplyAction="http://tempuri.org/IServiceOf_StaffType/DeleteByTResponse")]
        void DeleteByT(RoomM.Models.StaffType entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_StaffType/DeleteByT", ReplyAction="http://tempuri.org/IServiceOf_StaffType/DeleteByTResponse")]
        System.Threading.Tasks.Task DeleteByTAsync(RoomM.Models.StaffType entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_StaffType/DeleteByObject", ReplyAction="http://tempuri.org/IServiceOf_StaffType/DeleteByObjectResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<RoomM.Models.StaffType>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.StaffType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RoomM.Models.EntityBase))]
        void DeleteByObject(object id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_StaffType/DeleteByObject", ReplyAction="http://tempuri.org/IServiceOf_StaffType/DeleteByObjectResponse")]
        System.Threading.Tasks.Task DeleteByObjectAsync(object id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_StaffType/Edit", ReplyAction="http://tempuri.org/IServiceOf_StaffType/EditResponse")]
        void Edit(RoomM.Models.StaffType entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_StaffType/Edit", ReplyAction="http://tempuri.org/IServiceOf_StaffType/EditResponse")]
        System.Threading.Tasks.Task EditAsync(RoomM.Models.StaffType entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaffTypeService/GetSingle", ReplyAction="http://tempuri.org/IStaffTypeService/GetSingleResponse")]
        RoomM.Models.StaffType GetSingle(int staffTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaffTypeService/GetSingle", ReplyAction="http://tempuri.org/IStaffTypeService/GetSingleResponse")]
        System.Threading.Tasks.Task<RoomM.Models.StaffType> GetSingleAsync(int staffTypeId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStaffTypeServiceChannel : RoomM.DeskApp.StaffTypeService.IStaffTypeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StaffTypeServiceClient : System.ServiceModel.ClientBase<RoomM.DeskApp.StaffTypeService.IStaffTypeService>, RoomM.DeskApp.StaffTypeService.IStaffTypeService {
        
        public StaffTypeServiceClient() {
        }
        
        public StaffTypeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StaffTypeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StaffTypeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StaffTypeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<RoomM.Models.StaffType> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RoomM.Models.StaffType>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public void Add(RoomM.Models.StaffType entity) {
            base.Channel.Add(entity);
        }
        
        public System.Threading.Tasks.Task AddAsync(RoomM.Models.StaffType entity) {
            return base.Channel.AddAsync(entity);
        }
        
        public void DeleteByT(RoomM.Models.StaffType entity) {
            base.Channel.DeleteByT(entity);
        }
        
        public System.Threading.Tasks.Task DeleteByTAsync(RoomM.Models.StaffType entity) {
            return base.Channel.DeleteByTAsync(entity);
        }
        
        public void DeleteByObject(object id) {
            base.Channel.DeleteByObject(id);
        }
        
        public System.Threading.Tasks.Task DeleteByObjectAsync(object id) {
            return base.Channel.DeleteByObjectAsync(id);
        }
        
        public void Edit(RoomM.Models.StaffType entity) {
            base.Channel.Edit(entity);
        }
        
        public System.Threading.Tasks.Task EditAsync(RoomM.Models.StaffType entity) {
            return base.Channel.EditAsync(entity);
        }
        
        public RoomM.Models.StaffType GetSingle(int staffTypeId) {
            return base.Channel.GetSingle(staffTypeId);
        }
        
        public System.Threading.Tasks.Task<RoomM.Models.StaffType> GetSingleAsync(int staffTypeId) {
            return base.Channel.GetSingleAsync(staffTypeId);
        }
    }
}
